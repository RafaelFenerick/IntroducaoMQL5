//+------------------------------------------------------------------+
//|                                                       Volume.mq5 |
//|                                  Copyright 2021, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2021, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property indicator_separate_window
#property indicator_buffers 3
#property indicator_plots   2
//--- plot Volume
#property indicator_label1  "Volume"
#property indicator_type1   DRAW_COLOR_HISTOGRAM
#property indicator_color1  clrRoyalBlue,clrOrange
#property indicator_style1  STYLE_SOLID
#property indicator_width1  2
//--- plot Media
#property indicator_label2  "Media"
#property indicator_type2   DRAW_LINE
#property indicator_color2  clrRed
#property indicator_style2  STYLE_SOLID
#property indicator_width2  2
//---
#define AZUL 0
#define LARANJA 1
//--- input parameters
input int                      Periodo    =14;           // PerÃ­odo
input ENUM_APPLIED_VOLUME      TipoVolume =VOLUME_TICK;  // Volume aplicado
//--- indicator buffers
double         VolumeBuffer[];
double         VolumeColors[];
double         MediaBuffer[];
//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
  {
//--- indicator buffers mapping
   SetIndexBuffer(0,VolumeBuffer,INDICATOR_DATA);
   SetIndexBuffer(1,VolumeColors,INDICATOR_COLOR_INDEX);
   SetIndexBuffer(2,MediaBuffer,INDICATOR_DATA);
   
   ArraySetAsSeries(VolumeBuffer, true);
   ArraySetAsSeries(VolumeColors, true);
   ArraySetAsSeries(MediaBuffer, true);
   
//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
  {
//---
   ArraySetAsSeries(tick_volume, true);
   ArraySetAsSeries(volume, true);
   
   int inicio = MathMin(rates_total-prev_calculated, rates_total-1);
   
   for(int i=inicio; i>=0; i--)
     {
      VolumeBuffer[i] = (double)(TipoVolume==VOLUME_TICK?tick_volume[i]:volume[i]);
      
      if(i>=rates_total-Periodo)
         continue;
      
      double media = 0;
      for(int j=0; j<Periodo; j++)
         media += VolumeBuffer[i+j];
      media /= Periodo;
      
      MediaBuffer[i] = media;
      
      VolumeColors[i] = VolumeBuffer[i]>MediaBuffer[i]?AZUL:LARANJA;
     }
   
//--- return value of prev_calculated for next call
   return(rates_total);
  }
//+------------------------------------------------------------------+
